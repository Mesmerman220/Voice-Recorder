<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Recorder</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        #recordButton, #stopButton {
            font-size: 16px;
            padding: 10px 20px;
            margin: 10px;
        }
        #audioPlayback {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Simple Voice Recorder</h1>
    <button id="recordButton">Start Recording</button>
    <button id="stopButton" disabled>Stop Recording</button>
    <audio id="audioPlayback" controls></audio>
    <script>
        const recordButton = document.getElementById('recordButton');
        const stopButton = document.getElementById('stopButton');
        const audioPlayback = document.getElementById('audioPlayback');

        let mediaRecorder;
        let audioChunks = [];
        const maxRecordingTime = 2 * 60 * 1000; // 2 minutes in milliseconds
        let recordingTimeout;

        recordButton.addEventListener('click', async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.start();
                recordButton.disabled = true;
                stopButton.disabled = false;

                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    audioChunks = [];
                    const audioUrl = URL.createObjectURL(audioBlob);
                    audioPlayback.src = audioUrl;
                };

                recordingTimeout = setTimeout(() => {
                    mediaRecorder.stop();
                    recordButton.disabled = false;
                    stopButton.disabled = true;
                }, maxRecordingTime);
            } catch (error) {
                console.error('Error accessing microphone:', error);
            }
        });

        stopButton.addEventListener('click', () => {
            clearTimeout(recordingTimeout);
            mediaRecorder.stop();
            recordButton.disabled = false;
            stopButton.disabled = true;
        });
    </script>
</body>
</html>
